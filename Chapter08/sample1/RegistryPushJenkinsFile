pipeline {
    agent {
        docker {
            image 'dlambrig/gradle-agent-intel:latest'
            args '-v /var/run/docker.sock:/var/run/docker.sock'
            alwaysPull true
            customWorkspace '/home/jenkins/.gradle/workspace'
        }
       //label 'gradle-agent'
    }
    environment {
        REGISTRY = "https://localhost:5001"
        REGISTRY_HOST = "localhost:5001"
        PROJECT_DIR = "Chapter08/sample1"
        IMAGE_NAME = "calculator"
        IMAGE_TAG = "${BUILD_NUMBER}"
    }
    stages {
        stage('Checkout code and prepare environment') {
            steps {
                git url: 'https://github.com/BPerryUML/Continuous-Delivery-with-Docker-and-Jenkins-Second-Edition.git', branch: 'main'
                sh """
                set -e
                cd ${PROJECT_DIR}
                chmod +x gradlew
                """
            }
        }
        stage('main branch detected') {
            //when {
            //        branch 'main'
            //}
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') { 
                    sh """
                    cd Chapter08/sample1
                    ./gradlew jacocoTestCoverageVerification
                    ./gradlew checkstyleMain
                    ./gradlew test
                    ./gradlew jacocoTestReport
                    """
                }
                publishHTML (target: [
                            reportDir: 'Chapter08/sample1/build/reports/jacoco/test/html',
                            reportFiles: 'index.html',
                            reportName: "JaCoCo Coverage Report"
                ])
                publishHTML (
                    target: [
                        reportDir: 'Chapter08/sample1/build/reports/checkstyle',
                        reportFiles: 'main.html',
                        reportName: "JaCoCo Checkstyle"
                ])
                publishHTML (
                     target: [
                        reportDir: 'Chapter08/sample1/build/reports/tests/test',
                        reportFiles: 'index.html',
                        reportName: "JaCoCo Report"
                ])
                
            }
            post {
                success{
                    script {
                        withCredentials([usernamePassword(credentialsId: 'docker-registry', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh """
                        set -e
                        cd ${PROJECT_DIR}
                        echo "\$DOCKER_PASS" | docker login \$REGISTRY -u \$DOCKER_USER --password-stdin
                        docker build -t "calculator" .
                        docker tag "calculator" ${REGISTRY_HOST}/"calculator":"1.0"
                        docker push ${REGISTRY_HOST}/"calculator":"1.0"
                        """
                        }
                    }
                }
                failure{
                    echo 'tests fail!'
                }          
            }
        }
    }
    post { 
        failure {
            sleep 30
        }
    }
}
